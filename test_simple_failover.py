#!/usr/bin/env python3
"""
Script test ƒë∆°n gi·∫£n cho auto failover
"""

import psycopg2
import time
import subprocess
from datetime import datetime

def test_connection():
    """Test k·∫øt n·ªëi database"""
    try:
        conn = psycopg2.connect("postgresql://blink_user:12345@localhost:5434/blink_db")
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng: {version}")
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return False

def test_write():
    """Test ghi d·ªØ li·ªáu"""
    try:
        conn = psycopg2.connect("postgresql://blink_user:12345@localhost:5434/blink_db")
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng test
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS test_failover (
                id SERIAL PRIMARY KEY,
                message TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        
        # Th√™m d·ªØ li·ªáu test
        test_message = f"Test failover at {datetime.now()}"
        cursor.execute("""
            INSERT INTO test_failover (message) 
            VALUES (%s) 
            RETURNING id, message, created_at;
        """, (test_message,))
        
        result = cursor.fetchone()
        print(f"‚úÖ Ghi d·ªØ li·ªáu th√†nh c√¥ng: ID={result[0]}, Message={result[1]}")
        
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå L·ªói ghi d·ªØ li·ªáu: {e}")
        return False

def get_cluster_status():
    """L·∫•y tr·∫°ng th√°i cluster"""
    try:
        result = subprocess.run([
            "docker", "exec", "pg_auto_failover_monitor", 
            "pg_autoctl", "show", "state"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("üìä Tr·∫°ng th√°i cluster:")
            print(result.stdout)
            return True
        else:
            print(f"‚ùå L·ªói l·∫•y tr·∫°ng th√°i cluster: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói ch·∫°y l·ªánh cluster status: {e}")
        return False

def main():
    print("üß™ Test Auto Failover ƒë∆°n gi·∫£n")
    print("=" * 40)
    
    # Test 1: K·∫øt n·ªëi database
    print("\n1Ô∏è‚É£ Test k·∫øt n·ªëi database:")
    if not test_connection():
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database. Vui l√≤ng ki·ªÉm tra cluster.")
        return
    
    # Test 2: Ghi d·ªØ li·ªáu
    print("\n2Ô∏è‚É£ Test ghi d·ªØ li·ªáu:")
    if not test_write():
        print("‚ùå Kh√¥ng th·ªÉ ghi d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra cluster.")
        return
    
    # Test 3: Tr·∫°ng th√°i cluster
    print("\n3Ô∏è‚É£ Tr·∫°ng th√°i cluster:")
    get_cluster_status()
    
    print("\n‚úÖ Test c∆° b·∫£n th√†nh c√¥ng!")
    print("üéØ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:")
    print("   - M·ªü pgAdmin v√† k·∫øt n·ªëi v·ªõi localhost:5434")
    print("   - ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi ·ªü giao di·ªán")
    print("   - Ki·ªÉm tra d·ªØ li·ªáu trong pgAdmin")

if __name__ == "__main__":
    main()
