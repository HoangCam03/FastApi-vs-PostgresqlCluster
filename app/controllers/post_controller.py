from fastapi import APIRouter, Request, Depends, Form, HTTPException, UploadFile, File
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from app.database.connection import get_db
from app.middleware.models.post_model import PostModel
from app.middleware.models.kol_model import KOLModel
from app.utils.logger import log_debug
from app.middleware.auth_middleware import get_current_user  # Th√™m import
from app.middleware.models.user_model import UserModel
import os
from datetime import datetime

router = APIRouter()
templates = Jinja2Templates(directory="app/templates")

# T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a c√≥
UPLOAD_DIR = "app/static/uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# Th√™m function ki·ªÉm tra file ·∫£nh
def is_valid_image_file(filename):
    """Ki·ªÉm tra file c√≥ ph·∫£i l√† ·∫£nh kh√¥ng"""
    if not filename:
        return False
    
    allowed_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'}
    file_extension = os.path.splitext(filename.lower())[1]
    return file_extension in allowed_extensions

@router.get("/jisoo", response_class=HTMLResponse, name="jisoo")
async def jisoo(request: Request, db: Session = Depends(get_db)):
    """Hi·ªÉn th·ªã t·∫•t c·∫£ b√†i vi·∫øt c·ªßa Jisoo"""
    log_debug(f"üîç Truy c·∫≠p trang Jisoo - IP: {request.client.host}", "DEBUG")
    # L·∫•y b√†i vi·∫øt c·ªßa Jisoo th√¥ng qua KOL
    posts = db.query(PostModel).join(KOLModel).filter(KOLModel.name == "jisoo").all()
    log_debug(f"üìù T√¨m th·∫•y {len(posts)} b√†i vi·∫øt c·ªßa Jisoo", "DEBUG")
    return templates.TemplateResponse("members/jisoo.html", {
        "request": request,
        "posts": posts
    })

@router.get("/rose", response_class=HTMLResponse, name="rose")
async def rose(request: Request, db: Session = Depends(get_db)):
    """Hi·ªÉn th·ªã t·∫•t c·∫£ b√†i vi·∫øt c·ªßa Ros√©"""
    log_debug(f"üîç Truy c·∫≠p trang Ros√© - IP: {request.client.host}", "DEBUG")
    # L·∫•y b√†i vi·∫øt c·ªßa Ros√© th√¥ng qua KOL
    posts = db.query(PostModel).join(KOLModel).filter(KOLModel.name == "rose").all()
    log_debug(f"üìù T√¨m th·∫•y {len(posts)} b√†i vi·∫øt c·ªßa Ros√©", "DEBUG")
    return templates.TemplateResponse("members/rose.html", {
        "request": request,
        "posts": posts
    })

@router.get("/lisa", response_class=HTMLResponse, name="lisa")
async def lisa(request: Request, db: Session = Depends(get_db)):
    """Hi·ªÉn th·ªã t·∫•t c·∫£ b√†i vi·∫øt c·ªßa Lisa"""
    log_debug(f"üîç Truy c·∫≠p trang Lisa - IP: {request.client.host}", "DEBUG")
    # L·∫•y b√†i vi·∫øt c·ªßa Lisa th√¥ng qua KOL
    posts = db.query(PostModel).join(KOLModel).filter(KOLModel.name == "lisa").all()
    log_debug(f"üìù T√¨m th·∫•y {len(posts)} b√†i vi·∫øt c·ªßa Lisa", "DEBUG")
    return templates.TemplateResponse("members/lisa.html", {
        "request": request,
        "posts": posts
    })

@router.get("/jennie", response_class=HTMLResponse, name="jennie")
async def jennie(request: Request, db: Session = Depends(get_db)):
    """Hi·ªÉn th·ªã t·∫•t c·∫£ b√†i vi·∫øt c·ªßa Jennie"""
    log_debug(f"üîç Truy c·∫≠p trang Jennie - IP: {request.client.host}", "DEBUG")
    # L·∫•y b√†i vi·∫øt c·ªßa Jennie th√¥ng qua KOL
    posts = db.query(PostModel).join(KOLModel).filter(KOLModel.name == "jennie").all()
    log_debug(f"üìù T√¨m th·∫•y {len(posts)} b√†i vi·∫øt c·ªßa Jennie", "DEBUG")
    return templates.TemplateResponse("members/jennie.html", {
        "request": request,
        "posts": posts
    })

@router.get("/admin-management", response_class=HTMLResponse, name="admin_management")
async def admin_management(
    request: Request, 
    db: Session = Depends(get_db),
    current_user: UserModel = Depends(get_current_user)  
):
    """Trang qu·∫£n l√Ω b√†i vi·∫øt - Y√™u c·∫ßu ƒëƒÉng nh·∫≠p"""
    log_debug(f"üîê Admin Management accessed by: {current_user.username}", "INFO")
    # L·∫•y t·∫•t c·∫£ b√†i vi·∫øt
    posts = db.query(PostModel).all()
    log_debug(f"üìä T·ªïng s·ªë b√†i vi·∫øt trong h·ªá th·ªëng: {len(posts)}", "DEBUG")
    return templates.TemplateResponse("admin/admin-management.html", {
        "request": request,
        "posts": posts,
        "username": current_user.username  # Hi·ªÉn th·ªã username th·ª±c
    })

# Th√™m b√†i vi·∫øt m·ªõi - Y√™u c·∫ßu authentication
@router.post("/add-post", response_class=HTMLResponse, name="add_post")
async def add_post(
    request: Request,
    title: str = Form(..., description="Ti√™u ƒë·ªÅ b√†i vi·∫øt"),
    member: str = Form(..., description="Th√†nh vi√™n (jisoo, rose, lisa, jennie)"),
    category: str = Form(..., description="Danh m·ª•c b√†i vi·∫øt"),
    excerpt: str = Form(..., description="T√≥m t·∫Øt b√†i vi·∫øt"),
    content: str = Form(..., description="N·ªôi dung b√†i vi·∫øt"),
    author: str = Form(..., description="T√°c gi·∫£"),
    images: UploadFile = File(..., description="·∫¢nh b√†i vi·∫øt"),
    db: Session = Depends(get_db),
    current_user: UserModel = Depends(get_current_user)  # Th√™m authentication
):
    """Th√™m b√†i vi·∫øt m·ªõi - Y√™u c·∫ßu ƒëƒÉng nh·∫≠p"""
    log_debug(f"üìù Add post attempt by user: {current_user.username}", "INFO")
    log_debug(f" B·∫Øt ƒë·∫ßu t·∫°o b√†i vi·∫øt m·ªõi - Title: {title}, Member: {member}", "DEBUG")
    log_debug(f"üìÅ File ·∫£nh: {images.filename if images else 'Kh√¥ng c√≥'}", "DEBUG")
    
    try:
        # L∆∞u file ·∫£nh
        if images and images.filename:
            if not is_valid_image_file(images.filename):
                log_debug(f"‚ùå File kh√¥ng h·ª£p l·ªá: {images.filename}", "DEBUG")
                raise HTTPException(status_code=400, detail="File kh√¥ng ph·∫£i l√† ·∫£nh h·ª£p l·ªá")
            
            file_extension = os.path.splitext(images.filename)[1]
            filename = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}{file_extension}"
            file_path = os.path.join(UPLOAD_DIR, filename)
            
            log_debug(f"üíæ L∆∞u file ·∫£nh: {filename}", "DEBUG")
            with open(file_path, "wb") as buffer:
                content_file = images.file.read()
                buffer.write(content_file)
        
        # T·∫°o b√†i vi·∫øt m·ªõi
        new_post = PostModel(
            title=title,
            member=member,
            category=category,
            excerpt=excerpt,
            content=content,
            author_id=1,  # T·∫°m th·ªùi hardcode
            images=filename if images and images.filename else None # L∆∞u t√™n file n·∫øu c√≥ ·∫£nh
        )
        
        log_debug(f"üíæ L∆∞u b√†i vi·∫øt v√†o database", "DEBUG")
        db.add(new_post)
        db.commit()
        db.refresh(new_post)
        
        log_debug(f"‚úÖ B√†i vi·∫øt m·ªõi ƒë∆∞·ª£c t·∫°o: {title}", "INFO")
        log_debug(f" ID b√†i vi·∫øt m·ªõi: {new_post.id}", "DEBUG")
        
        # Redirect v·ªÅ trang admin
        return RedirectResponse(url="/post/admin-management", status_code=302)
        
    except Exception as e:
        log_debug(f"‚ùå L·ªói khi t·∫°o b√†i vi·∫øt: {e}", "ERROR")
        raise HTTPException(status_code=500, detail="L·ªói khi t·∫°o b√†i vi·∫øt")

# S·ª≠a b√†i vi·∫øt - Y√™u c·∫ßu authentication
@router.post("/edit-post/{post_id}", response_class=HTMLResponse, name="edit_post")
async def edit_post(
    request: Request,
    post_id: int,
    title: str = Form(..., description="Ti√™u ƒë·ªÅ b√†i vi·∫øt"),
    member: str = Form(..., description="Th√†nh vi√™n"),
    category: str = Form(..., description="Danh m·ª•c b√†i vi·∫øt"),
    excerpt: str = Form(..., description="T√≥m t·∫Øt b√†i vi·∫øt"),
    content: str = Form(..., description="N·ªôi dung b√†i vi·∫øt"),
    author: str = Form(..., description="T√°c gi·∫£"),
    images: UploadFile = File(None, description="·∫¢nh b√†i vi·∫øt (t√πy ch·ªçn)"),
    db: Session = Depends(get_db),
    current_user: UserModel = Depends(get_current_user)  # Th√™m authentication
):
    """S·ª≠a b√†i vi·∫øt - Y√™u c·∫ßu ƒëƒÉng nh·∫≠p"""
    log_debug(f"‚úèÔ∏è Edit post {post_id} attempt by user: {current_user.username}", "INFO")
    log_debug(f"‚úèÔ∏è B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t b√†i vi·∫øt ID: {post_id}", "DEBUG")
    log_debug(f" Th√¥ng tin c·∫≠p nh·∫≠t - Title: {title}, Member: {member}", "DEBUG")
    log_debug(f"üìÅ File ·∫£nh m·ªõi: {images.filename if images else 'Kh√¥ng c√≥'}", "DEBUG")
    
    try:
        # T√¨m b√†i vi·∫øt
        post = db.query(PostModel).filter(PostModel.id == post_id).first()
        if not post:
            log_debug(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ID: {post_id}", "DEBUG")
            raise HTTPException(status_code=404, detail="B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i")
        
        log_debug(f" T√¨m th·∫•y b√†i vi·∫øt: {post.title}", "DEBUG")
        
        # C·∫≠p nh·∫≠t th√¥ng tin
        post.title = title
        post.member = member
        post.category = category
        post.excerpt = excerpt
        post.content = content
        
        # Ch·ªâ c·∫≠p nh·∫≠t ·∫£nh n·∫øu c√≥ upload ·∫£nh m·ªõi
        if images and images.filename:
            log_debug(f"Ô∏è C·∫≠p nh·∫≠t ·∫£nh m·ªõi: {images.filename}", "DEBUG")
            # X√≥a ·∫£nh c≈© n·∫øu c√≥
            if post.images:
                old_image_path = os.path.join(UPLOAD_DIR, post.images)
                if os.path.exists(old_image_path):
                    log_debug(f"Ô∏è X√≥a ·∫£nh c≈©: {post.images}", "DEBUG")
                    os.remove(old_image_path)
            
            # L∆∞u ·∫£nh m·ªõi
            file_extension = os.path.splitext(images.filename)[1]
            filename = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}{file_extension}"
            file_path = os.path.join(UPLOAD_DIR, filename)
            
            log_debug(f"üíæ L∆∞u ·∫£nh m·ªõi: {filename}", "DEBUG")
            with open(file_path, "wb") as buffer:
                content_file = images.file.read()
                buffer.write(content_file)
            
            post.images = filename
        else:
            log_debug("üì∑ Gi·ªØ nguy√™n ·∫£nh c≈©", "DEBUG")
        
        db.commit()
        log_debug(f"‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {title}", "INFO")
        
        # Redirect v·ªÅ trang admin
        return RedirectResponse(url="/post/admin-management", status_code=302)
        
    except Exception as e:
        log_debug(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt: {e}", "ERROR")
        raise HTTPException(status_code=500, detail="L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt")

# X√≥a b√†i vi·∫øt - Y√™u c·∫ßu authentication
@router.post("/delete-post/{post_id}", response_class=HTMLResponse, name="delete_post")
async def delete_post(
    request: Request,
    post_id: int,
    db: Session = Depends(get_db),
    current_user: UserModel = Depends(get_current_user)  # Th√™m authentication
):
    """X√≥a b√†i vi·∫øt - Y√™u c·∫ßu ƒëƒÉng nh·∫≠p"""
    log_debug(f"üóëÔ∏è Delete post {post_id} attempt by user: {current_user.username}", "INFO")
    log_debug(f"üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a b√†i vi·∫øt ID: {post_id}", "DEBUG")
    
    try:
        # T√¨m b√†i vi·∫øt
        post = db.query(PostModel).filter(PostModel.id == post_id).first()
        if not post:
            log_debug(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ID: {post_id}", "DEBUG")
            raise HTTPException(status_code=404, detail="B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i")
        
        log_debug(f"üìñ T√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ x√≥a: {post.title}", "DEBUG")
        
        # X√≥a file ·∫£nh
        if post.images:
            image_path = os.path.join(UPLOAD_DIR, post.images)
            if os.path.exists(image_path):
                log_debug(f"üóëÔ∏è X√≥a file ·∫£nh: {post.images}", "DEBUG")
                os.remove(image_path)
            else:
                log_debug(f"‚ö†Ô∏è File ·∫£nh kh√¥ng t·ªìn t·∫°i: {post.images}", "DEBUG")
        else:
            log_debug(" B√†i vi·∫øt kh√¥ng c√≥ ·∫£nh", "DEBUG")
        
        # X√≥a b√†i vi·∫øt
        log_debug(f"Ô∏è X√≥a b√†i vi·∫øt kh·ªèi database", "DEBUG")
        db.delete(post)
        db.commit()
        
        log_debug(f"‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a: {post.title}", "INFO")
        
        # Redirect v·ªÅ trang admin
        return RedirectResponse(url="/post/admin-management", status_code=302)
        
    except Exception as e:
        log_debug(f"‚ùå L·ªói khi x√≥a b√†i vi·∫øt: {e}", "ERROR")
        raise HTTPException(status_code=500, detail="L·ªói khi x√≥a b√†i vi·∫øt")

# Xem chi ti·∫øt b√†i vi·∫øt
@router.get("/post-detail/{post_id}", response_class=HTMLResponse, name="post_detail")
async def post_detail(
    request: Request,
    post_id: int,
    db: Session = Depends(get_db)
):
    """Xem chi ti·∫øt b√†i vi·∫øt theo ID"""
    log_debug(f"Ô∏è Truy c·∫≠p chi ti·∫øt b√†i vi·∫øt ID: {post_id} - IP: {request.client.host}", "DEBUG")
    
    post = db.query(PostModel).filter(PostModel.id == post_id).first()
    if not post:
        log_debug(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ID: {post_id}", "DEBUG")
        raise HTTPException(status_code=404, detail="B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i")
    
    log_debug(f"üìñ Hi·ªÉn th·ªã b√†i vi·∫øt: {post.title}", "DEBUG")
    
    return templates.TemplateResponse("posts/detail.html", {
        "request": request,
        "post": post
    })

# Xem chi ti·∫øt b√†i vi·∫øt Jisoo
@router.get("/jisoo-post-detail/{post_id}", response_class=HTMLResponse, name="jisoo_post_detail")
async def jisoo_post_detail(
    request: Request,
    post_id: int,
    db: Session = Depends(get_db)
):
    """Xem chi ti·∫øt b√†i vi·∫øt Jisoo theo ID"""
    log_debug(f"üëÅÔ∏è Truy c·∫≠p chi ti·∫øt b√†i vi·∫øt Jisoo ID: {post_id} - IP: {request.client.host}", "DEBUG")
    
    post = db.query(PostModel).filter(PostModel.id == post_id, PostModel.member == "jisoo").first()
    if not post:
        log_debug(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt Jisoo ID: {post_id}", "DEBUG")
        raise HTTPException(status_code=404, detail="B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i")
    
    log_debug(f"üìñ Hi·ªÉn th·ªã b√†i vi·∫øt Jisoo: {post.title}", "DEBUG")
    
    return templates.TemplateResponse("posts/post_detail.html", {
        "request": request,
        "post": post
    })

# Xem chi ti·∫øt b√†i vi·∫øt Ros√©
@router.get("/rose-post-detail/{post_id}", response_class=HTMLResponse, name="rose_post_detail")
async def rose_post_detail(
    request: Request,
    post_id: int,
    db: Session = Depends(get_db)
):
    """Xem chi ti·∫øt b√†i vi·∫øt Ros√© theo ID"""
    log_debug(f"üëÅÔ∏è Truy c·∫≠p chi ti·∫øt b√†i vi·∫øt Ros√© ID: {post_id} - IP: {request.client.host}", "DEBUG")
    
    post = db.query(PostModel).filter(PostModel.id == post_id, PostModel.member == "rose").first()
    if not post:
        log_debug(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt Ros√© ID: {post_id}", "DEBUG")
        raise HTTPException(status_code=404, detail="B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i")
    
    log_debug(f"üìñ Hi·ªÉn th·ªã b√†i vi·∫øt Ros√©: {post.title}", "DEBUG")
    
    return templates.TemplateResponse("posts/rose_post_detail.html", {
        "request": request,
        "post": post
    })

# Xem chi ti·∫øt b√†i vi·∫øt Lisa
@router.get("/lisa-post-detail/{post_id}", response_class=HTMLResponse, name="lisa_post_detail")
async def lisa_post_detail(
    request: Request,
    post_id: int,
    db: Session = Depends(get_db)
):
    """Xem chi ti·∫øt b√†i vi·∫øt Lisa theo ID"""
    log_debug(f"üëÅÔ∏è Truy c·∫≠p chi ti·∫øt b√†i vi·∫øt Lisa ID: {post_id} - IP: {request.client.host}", "DEBUG")
    
    post = db.query(PostModel).filter(PostModel.id == post_id, PostModel.member == "lisa").first()
    if not post:
        log_debug(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt Lisa ID: {post_id}", "DEBUG")
        raise HTTPException(status_code=404, detail="B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i")
    
    log_debug(f"üìñ Hi·ªÉn th·ªã b√†i vi·∫øt Lisa: {post.title}", "DEBUG")
    
    return templates.TemplateResponse("posts/lisa_post_detail.html", {
        "request": request,
        "post": post
    })

# Xem chi ti·∫øt b√†i vi·∫øt Jennie
@router.get("/jennie-post-detail/{post_id}", response_class=HTMLResponse, name="jennie_post_detail")
async def jennie_post_detail(
    request: Request,
    post_id: int,
    db: Session = Depends(get_db)
):
    """Xem chi ti·∫øt b√†i vi·∫øt Jennie theo ID"""
    log_debug(f"üëÅÔ∏è Truy c·∫≠p chi ti·∫øt b√†i vi·∫øt Jennie ID: {post_id} - IP: {request.client.host}", "DEBUG")
    
    post = db.query(PostModel).filter(PostModel.id == post_id, PostModel.member == "jennie").first()
    if not post:
        log_debug(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt Jennie ID: {post_id}", "DEBUG")
        raise HTTPException(status_code=404, detail="B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i")
    
    log_debug(f"üìñ Hi·ªÉn th·ªã b√†i vi·∫øt Jennie: {post.title}", "DEBUG")
    
    return templates.TemplateResponse("posts/jennie_post_detail.html", {
        "request": request,
        "post": post
    })

